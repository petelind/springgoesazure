This is content I intend to cover during 2 weeks Sep 11 - Sep 22.

Spring Boot:
  Core concepts:      
    ✔ extension to the Spring Framework Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run" @done(23-09-11 10:47)
    ✔ Runs its own container as opposed to WAR files @done(23-09-11 10:47)
    ✔ Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can "just run" @done(23-09-12 06:11)
    ✔ pom.xml: spring-boot-starter @done(23-09-12 06:11)
    @Component - generic stereotype for any Spring-managed component: 
      ✔ Aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. @done(23-09-11 10:47)
      ✔ @Repository - stereotype for persistence layer @done(23-09-11 10:47)
      ✔ @Service - stereotype for service layer @done(23-09-11 10:47)
      ✔ @Controller - stereotype for presentation layer (spring-mvc) @done(23-09-11 10:48)
      ✔ @RestController - stereotype for presentation layer (spring-mvc) - returns JSON @done(23-09-11 10:48)
      ✔ @Configuration - indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime @done(23-09-11 10:48)
      ✔ @EnableAutoConfiguration - enable Spring Boot’s auto-configuration mechanism @done(23-09-11 10:48)
      ✔ @Autowired - I want an instance injected here @done(23-09-11 10:48)
    ✔  mvnm spring-boot:run @done(23-09-13 09:00)
    ✔ @SpringBootApplication annotation: @Configuration, @EnableAutoConfiguration, @ComponentScan @done(23-09-18 08:32)
      ✔ some properties still need to be provided like server names etc. @done(23-09-11 10:48)
      ✔ use can use @override to override the default values @done(23-09-11 10:48)
      ✔ java -jar target/myproject-0.0.1-SNAPSHOT.jar --debug to see what is being autoconfigured @done(23-09-11 10:48)
  Lets build app bottom up all the way to controller:
    ✔ Add @repository to the repository class (no persistence layer yet) @done(23-09-11 14:12)
    Annotate to turn into rest controller:
      ✔ @RestController @done(23-09-11 14:12)
      ✔ @RequestMapping("/questions") so you can omit path later on @done(23-09-11 14:12)
      ✔ @GetMapping("/questions") vs getQ@RequestMapping(method=RequestMethod.GET) {...} @done(23-09-11 14:12)
      ✔ @GetMapping(path="/questions/{id}") getQ(@PathVariable("id")) int id) {..} @done(23-09-11 14:12)
      ✔ @GetMapping(path="/questions") getQ(@RequestParam("id")) int id) {..} @done(23-09-11 14:12)
      ✔ General consideration - adopt a convention (uniform mapping or entity access) @done(23-09-11 14:12)
      ✔ @PostMapping Question createQuestion(@RequestBody Question question) {..} @done(23-09-11 14:12)
      ✔ Getting data in @RequestBody - JSON @done(23-09-11 14:12)
      ✔ Exercise: add POST and PUT to the controller @done(23-09-11 14:12)
    Handling exceptions:
      ✔ methodName throws KindOfException {..} @done(23-09-11 14:12)
      ✔ 500 - Internal Server Error not a proper way @done(23-09-11 14:12)
      ✔ return mathQuestionsRepo.findById(id).orElseThrow(() -> new NoSuchElementException(id)); @done(23-09-18 08:32)
      ✔ @ExceptionHandler(KindOfException.class) public ErrorResponse handleException(NoSuchElementException ex) {..} @done(23-09-11 14:12)
        ✔ return ErrorResponse.create(ex, HttpStatus.NOT_FOUND, ex.getMessage()); @done(23-09-11 14:12)
      Validation: 
        ✔ spring-boot-validation dependency @done(23-09-11 14:12)
        ✔ @Valid @RequestBody Question question @done(23-09-11 14:12)
        Domain annotations:
        ✔ @NotNull(message = "Question is mandatory") @done(23-09-11 14:12)
        ✔ @Size(min = 2, message = "Question should have at least 2 characters") @done(23-09-11 14:12)
        ✔ @Size(max = 100, message = "Question should have at most 100 characters") @done(23-09-11 14:12)
        ✔ @Pattern(regexp = "[A-Za-z0-9 ]*", message = "Question has invalid characters") @done(23-09-11 14:12)
        ✔ @NotBlank(message = "Question cannot be blank") @done(23-09-11 14:12)
        ✔ Then you can throw ConstraintViolationException and handle it in the controller with the error response of type ErrorResponse HttpStatus.BAD_REQUEST @done(23-09-11 14:12)
        
    Persistence:
        ✔ core vs community Spring Data libs @done(23-09-12 20:09)
        ✔ CrudRepository @done(23-09-12 20:09)
        ✔ public interface MathQuestionsRepo extends JpaRepository<Question, Integer> {..} @done(23-09-12 20:09)
        ✔ [or DBSpecificTypeRepository] @done(23-09-12 20:09)
        ✔ @Entity vs @Document @done(23-09-12 20:09)
          ✔ @Id in @Document are strings! @done(23-09-12 20:09)
          ✔ UUID is the most common type for @Id @done(23-09-12 20:09)
          ✔ @Entity - GeneratedValue(strategy = GenerationType.IDENTITY) for autoincrement for id @done(23-09-12 20:10)
        ✔ Declare your repo as above and Spring will autoconfigure it for you @done(23-09-12 20:10)
        ✔ findById, findAll, save, delete, deleteAll etc. will be autoconfigured if you follow convention @done(23-09-12 20:10)
        ✔ @Override if you want your own implementation @done(23-09-12 20:10)
        ✔ Exercise: add NoSQL persistence just for fun (we will not use it) @done(23-09-12 20:10)
        ✔ Sidenotes: @done(23-09-12 20:10)
            ✔ not much fun with RDMBS - initializing schema and data with profiles @done(23-09-12 20:10)
            ✔ Managing migrations with flyway @done(23-09-12 20:10)
    Configuring the app with externalized configuration:
        ✔ application.properties in src/main/resources/application.yml @done(23-09-18 08:32)
        ✔ mvn sprint-boot:run -Dspring-boot.run.profiles=localenv @done(23-09-12 20:10)
    Reactive programming:
      ✔ Batch processing vs producer/consumer processing @done(23-09-12 20:10)
      ✔ The concept of CompletableFuture (a promise of a value) @done(23-09-12 20:10)
      ✔ The concept of Mono and Flux @done(23-09-12 20:10)
      ✔ Blocking @done(23-09-12 20:10)


  Docker:
    Basic commands: 
      ✔ docker run -it ubuntu bash @done(23-09-12 20:10)
      ✔ docker run mongo -d @done(23-09-12 20:10)
      ✔ docker stop <container id> @done(23-09-12 20:10)
      ✔ docker run -p 27017:27017 mongo @done(23-09-12 20:10)
      ✔ docker ps @done(23-09-12 20:10)
      ✔ docker ps -a @done(23-09-12 20:10)
      ✔ docker images @done(23-09-12 20:10)
      ✔ docker rm <container id> @done(23-09-12 20:10)
      ✔ docker rmi <image id> @done(23-09-12 20:10)
      ✔ docker run -d -p 8080:8080 --name myapp myapp @done(23-09-12 20:10)
      ✔ docker exec -it <container id> bash @done(23-09-12 20:10)
      ✔ docker stop <container id> @done(23-09-12 20:10)
      ✔ docker start <container id>- @done(23-09-12 20:10)
      ✔ docker logs <container id> @done(23-09-12 20:10)
    Building:
      ✔ Create a Dockerfile @done(23-09-13 20:05)
      ✔ FROM openjdk:17-jdk-alpine @done(23-09-13 20:05)
      ✔ talk through the structure @done(23-09-13 20:05)
      ✔ Docker build . @done(23-09-13 20:05)
      ✔ Docker build -t <name> . @done(23-09-13 20:05)
      ✔ Docker build -t <name>:<tag> . @done(23-09-13 20:05)
      ✔ Docker build @done(23-09-13 20:05)
      ✔ -t <name>:<tag> -f <dockerfile name> . @done(23-09-13 20:05)
      ✔ Docker build -t <name>:<tag> -f <dockerfile name> --build-arg <arg name>=<arg value> . @done(23-09-13 20:05)
      ✔ Docker build -t <name>:<tag> -f <dockerfile name> --build-arg <arg name>=<arg value> --build-arg <arg name>=<arg value> . @done(23-09-13 20:05)
      ✔ Layers @done(23-09-13 20:05)
      ✔ mvn spring-boot:build-image @done(23-09-13 20:05)
      ✔ tagging: @done(23-09-13 20:05)
          ✔ docker tag <image id> <acr url/<repo name>:<tag> @done(23-09-18 08:32)
          ✔ docker tag <image id> <dockerhub username>/<repo name>:latest @done(23-09-18 08:32)
          ✔ docker tag <image id> <dockerhub username>/<repo name>:$(git rev-parse --short HEAD) @done(23-09-18 08:32)
          ✔ docker push --all-tags <acr url/<repo name> @done(23-09-18 08:32)
      ✔ Exercise: create script which builds, tags, and pushes to the registry @done(23-09-13 20:05)
      ✔ Exercise: using "acr build" command @done(23-09-13 20:05)

  Kubernetes:
    Core concepts:
        ✔ Core services: API Server, Scheduler, Controller Manager, etcd @done(23-09-15 08:17)
        ✔ Cluster and its edge @done(23-09-15 08:17)
        ✔ Nodes @done(23-09-15 08:17)
        ✔ Pods @done(23-09-15 08:17)
        ✔ ReplicaSets @done(23-09-15 08:17)
        ✔ Deployments @done(23-09-15 08:17)
        ✔ Services @done(23-09-15 08:17)
            ✔ Labels and selectors @done(23-09-15 08:17)
        ✔ Ingress @done(23-09-15 08:17)
        ✔ ConfigMaps @done(23-09-15 08:17)
        ✔ Secrets @done(23-09-15 08:17)
        ✔ Namespaces @done(23-09-15 08:17)
        ✔ /api/ and talking to it @done(23-09-15 08:17)
        ✔ Exercise: deploy our app @done(23-09-15 08:17)
    Running local:
      ✔ Deploying imperative way: @done(23-09-18 08:31)
        ✔ kubectl get pods --namespace kube-system @done(23-09-18 08:32)
        ✔ kubectl create namespace dumbapp @done(23-09-18 08:32)
        ✔ kubectl config set-context --current --namespace=dumbapp @done(23-09-18 08:32)
        ✔ kubectl config view --minify | grep namespace: @done(23-09-18 08:32)
        ✔ sudo lsof -i :80 @done(23-09-18 08:32)
        ✔ kubectl create deployment dumbapp-deployment --image=manojnair/myapp:v1 --port=80 @done(23-09-18 08:32)
        ✔ kubectl get deployments @done(23-09-18 08:32)
        ✔ kubectl describe deployment <name> @done(23-09-18 08:32)
        ✔ kubectl expose deployment dumbapp-deployment --name dumbapp-service --type=ClusterIP --port=80 --target-port=80 @done(23-09-18 08:32)
        ✔ kubectl expose service dumbapp-service --name dumbapp-endpoint --type=LoadBalancer --port=80 --target-port=80 @done(23-09-18 08:32)
        ✔ kubectl get svc --watch @done(23-09-18 08:32)
        ✔ sudo kubectl port-forward service/<name> 80:80 *) How to make it work :) @done(23-09-18 08:32)
        ✔ kubectl create configmap <name> --from-literal=<key>=<value> @done(23-09-18 08:32)
        ✔ kubectl create configmap <name> --from-file=<path> @done(23-09-18 08:32)
        ✔ kubectl get pods @done(23-09-18 08:32)
        ✔ kubectl get pods -o wide @done(23-09-18 08:32)
        ✔ kubectl logs <name> @done(23-09-18 08:32)
        ✔ kubectl scale deployment <name> --replicas=10 @done(23-09-18 08:32)
        ✔ kubectl scale deployment <name> --node-count=3 @done(23-09-18 08:32)
        ✔ kubectl edit deployment <name> --record=true @done(23-09-18 08:32)
        ✔ kubectl rollout history deployment/<name> @done(23-09-18 08:32)
        ✔ kubectl rollout undo deployment/<name>sudo @done(23-09-18 08:32)
        ✔ kubectl rollout undo deployment/<name> --to-revision=X @done(23-09-18 08:32)
        ✔ Exercise: kill a pod, see what happens: kubectl delete pod <pod name>kubect @done(23-09-18 08:32)

    ✔ Declarative VS imperative: @done(23-09-18 08:31)
      ✔ Deploying declarative (not really) way with YAML @done(23-09-18 08:31)
      ✔ Exercise: deploy with YAML @done(23-09-18 08:31)
        ✔ kubectl create deployment <name> --image=<image> --dry-run=client -o yaml > deployment.yaml @done(23-09-18 08:32)
        ✔ kubectl edit deployment <name> @done(23-09-18 08:32)
        ✔ Attention: pull policy = Never @done(23-09-18 08:32)
        ✘ Exercise: add a config map @cancelled(23-09-18 08:32)
        ✘ Exercise: add a deployment for each service @cancelled(23-09-18 08:32)
        ✘ Exercise: add a service for each deployment @cancelled(23-09-18 08:32)
        ✘ Exercise: expose the service / deployment @cancelled(23-09-18 08:32)
        OR
        ✔ Exercise: or find an error @done(23-09-18 08:31)
        ✔ kubectl run -it --rm --image=curlimages/curl curly -- sh @done(23-09-18 08:31)
        ✔ Exercise: enable health checks @done(23-09-18 08:31)
        ✔ Exercise: Implement a custom health check @done(23-09-18 08:31)
        ✔ WARNING: pitfalls of health checks @done(23-09-18 08:31)
    
    Azure:
      Design considerations:
        ✔ Complexity of your solution: exponential vs logarithmic @done(23-09-18 08:56)
        ✔ SPSTC(p)W: Simplest possible solution that could (possibly) work @done(23-09-18 17:00)
        ✔ Locality @done(23-09-18 17:00)
        ✔ Availability @done(23-09-18 17:01)
        ✔ Security and the attack surface @done(23-09-18 17:01)
          ✔ Public vs private endpoints @done(23-09-18 17:01)
          ✔ VNets @done(23-09-18 17:01)
          ✔ Application gateways @done(23-09-18 17:01)
        ✔ Maintainability: do we need a Caterpillar truck? @done(23-09-18 17:01)
      Core styles and entities:
        ✔ IaaS VS PaaS vs SaaS @done(23-09-18 08:29)
        ✔ CaaS: retain some independence @done(23-09-18 08:29)

    Running in AKS:
      ✔ Go through playbook @done(23-09-18 17:57)
      ✔ Go through deployment.yaml - enabling access via roles @done(23-09-18 17:57)
      ✔ Moving role definitions into separate deployment.yaml @done(23-09-18 17:57)

    Scaling:
      ✔ Manual and Auto @done(23-09-18 15:12)
      Self-healing:
        ✔ Actuator @done(23-09-18 15:12)
        ✔ Liveness and readiness @done(23-09-18 15:12)
          ✔ Default: container exit codes, immediate @done(23-09-18 15:12)
          ✔ Proper: health checks, check periods & delay @done(23-09-18 15:13)
        ✔ Health checks in YAML @done(23-09-18 15:13)
        Scaling with metrics:
        ✔ CPU @done(23-09-18 15:13)
        ✔ Memory @done(23-09-18 15:13)
        ✔ Custom metrics @done(23-09-18 15:13)
      ✔ Exercise: bring up more replicas @done(23-09-18 15:13)
        ✔ kubectl scale <deployment name> --replicas=X @done(23-09-18 15:13)
        ✔ kubectl scale --name <cluster> --node-count=X @done(23-09-18 15:13)
        ✔ az aks scale --resource-group <resource-group-name> --name <aks-cluster-name> --node-count X @done(23-09-18 17:57)
      ✔ Exercise: set up autoscaling with new hpa.yaml @done(23-09-18 17:57)
    
    Release strategy:
      ✔ Using kubectl edit <resource> --record=true @done(23-09-18 08:55)
        ✔ kubectl rollout history <resourcetype>/name @done(23-09-18 08:55)
        ✔ Roll back - kubectl rollout undo <resource> @done(23-09-18 08:56)
        ✔ Roll back - kubectl rollout undo <resource> --to-revision=X @done(23-09-18 08:56)
      ✔ Using selectors & labels @done(23-09-18 17:57)
      ✔ Using clusters (repaving) @done(23-09-18 17:57)
      ✔ Using namespaces @done(23-09-18 17:57)
    Publishing:
      ✔ DNS - A-names for blue and green, CNAME for the app @done(23-09-18 17:57)
      ☐ Traffic Manager
      ☐ Front Door

  CosmosDB:
    ✔ Relational vs NoSQL vs Graph (#13) @done(23-09-20 10:57)
      ✔ In the end all boils down to the hash table - so can we just use it? (#11) @done(23-09-20 10:57)
    ✔ Gremlin interface vs NoSQL interface @done(23-09-20 10:57)
    ✔ RUs = CPU + IOPS + mem for 1KB on READ: (#59) @done(23-09-20 10:57)
      ✔ 3X on upserts/inserts @done(23-09-20 10:57)
      ✔ unknown for queries (query -> query stats -> RUs) @done(23-09-20 10:57)
      ✔ Capacity Calculator @done(23-09-20 10:57)
    ✔ Throughput: (#55) @done(23-09-20 13:07)
      ✔ DB or container level @done(23-09-20 13:07)
      ✔ Provisioned (be aware of 429 THROTTLED) @done(23-09-20 13:07)
      ✔ Autoscale @done(23-09-20 13:07)
      ✔ Serverless @done(23-09-20 13:07)
    Design considerations:
      ✔ General concept - its a dict of dicts @done(23-09-20 10:57)
        ✔ Embedded dicts-leafs cannot be bigger than 2MB @done(23-09-20 10:57)
        ✔ Fill factor  = target 0.8 @done(23-09-20 10:57)
        ✔ Partition key: high cardinality (unique but not too unique); 20GB limit per partition @done(23-09-20 10:58)
        ✔ Avoid hot partitions (date vs datetime vs timestamp) @done(23-09-20 10:58)
        ✔ Small items (ideally <4K, 16/32K max) @done(23-09-20 10:58)
        ✔ No joins: you can embed! @done(23-09-20 10:58)
          Embed:
            ✔ 1:1 yes (Contact got an address) @done(23-09-20 10:58)
            ✔ 1:N if updated together (Contact got individual permissions) @done(23-09-20 10:58)
            ✔ N:N no! (Contact got memberships in many Groups instead of individual permissions) @done(23-09-20 10:58)
            ✔ Embedding with Change Feed: traversal.emit() and @Service @Async @Scheduled(FixedRate=1000) @done(23-09-20 10:58)
        ✔ Exercise: we have Product and ProductCategory - how to embed? @done(23-09-20 10:58)
          ✔ We aim to handle Products! Need complex queries/analytics? Connect Synapse! @done(23-09-20 10:58)
          ✔ You want both having cross reference? Use Change Feed & Functions. @done(23-09-20 10:58)
        ✔ Use projections - ask for what you need @done(23-09-20 10:58)
        ✔ Indexing: avoid cross-partition ("fan-out") queries (thats why index is all-spanning by default) @done(23-09-20 13:06)
          ✔ Search vs scan @done(23-09-20 13:06)
          ✔ If fan-out is unavoidable (its OK) - use indexes @done(23-09-20 13:06)
        ✔ Make common case fast: index for what you gonna query @done(23-09-20 13:06)
        ✔ Indexing: include/exclude paths @done(23-09-20 13:06)
          ✔ Inlcude: everything in /* except /_attachments @done(23-09-20 13:06)
          ✔ Exclude: everything in [] except those you query often @done(23-09-20 13:06)
        Precision matters:
          ✔ /headquarters/usa/wa/* exclude kind of supposed to skip... @done(23-09-20 13:06)
          ✔ /headquarters/usa/wa/redmond/* include will index nevetheless @done(23-09-20 13:06)
    ✔ Geo-replication @done(23-09-20 13:06)
        ✔ Multi-master (write anywhere); can be disabled @done(23-09-20 13:06)
        ✔ LWW: last write wins @done(23-09-20 13:06)
        ✔ No versioning (but you can implement via custom resolution) @done(23-09-20 13:06)
    ✔ Consistency levels: (#61) @done(23-09-20 13:06)
      ✔ Strong @done(23-09-20 13:06)
      ✔ Bound staleness: strong within same region with writes, eventual across regions with K or T @done(23-09-20 13:06)
      ✔ Session: strong within same session (var client with his pool, that is), eventual across sessions @done(23-09-20 13:06)
      ✔ Prefix: other regions never receive writes out-of-order @done(23-09-20 13:06)
      ✔ Eventual: no guarantees (including order) whatsoever; client may end up seeing OLDER records @done(23-09-20 13:06)
      ✔ Can be specified per query! @done(23-09-20 13:06)
    ✔ Accessing: public endpoint vs private endpoint @done(23-09-20 13:06)
    ✔ Running locally: emulator in docker or just mongocontainer @done(23-09-20 13:06)
    https://learn.microsoft.com/en-us/azure/cosmos-db/local-emulator?tabs=ssl-netstd21
    ✔ Connecting: uri vs host/port/username etc @done(23-09-20 13:06)
    ✔ Kubernetes secrets: just another kind of ConfigMap @done(23-09-20 13:06)
          ✔ Encoding to base64 @done(23-09-20 13:06)
          ✔ Creating Secrets from YAML @done(23-09-20 13:06)
          ✔ Using Secrets in YAML: fromSecret @done(23-09-20 13:06)
    ✔ Using with Spring Data @done(23-09-20 13:06)
    REDIS:
      ✔ DBs gives <10ms, chances you'll never need it if connected to cluster @done(23-09-20 13:06)
      ✔ For App Service - you need it (you run in shared env) @done(23-09-20 13:06)
      ✔ If you run in AKS - you may want to have one INSIDE the cluster @done(23-09-20 13:06)
      ✔ Using inside the app: @done(23-09-20 13:06)
        ✔ @EnableCaching @done(23-09-20 13:06)
        ✔ @Cacheable @done(23-09-20 13:06)
          ✔ On @Repository level @done(23-09-20 13:06)
          ✔ On @Controller level @done(23-09-20 13:06)
        ✔ @CacheEvict: @done(23-09-20 13:07)
          ✔ discard collection on writes (delete, update) @done(23-09-20 13:07)
          ✔ discard collection timed (if there is background process that updates the collection) @done(23-09-20 13:07)
    
    Gremlin:
      The challenge of many to many
      The challenge of many to many to many
      Vertex
        label (eg 'thomas')
          No uniqueness constraint!!!
        PK (eg 'user')
      Edge
        label (eg 'keyContactFor')
        PK ('AU')
      Property
      Graph
      Query VS Traversal
      Gremlin language (groovy-like):
        format: area (vertex/egde) --> filter -> projection or command -> .next() or .toList() or.fold() 
        g.V().drop(),
        // this one will use label will use label 'person' for the vertex, and you can further split by lets say 'date' as PK
        g.addV('person').property('id', 'thomas').property('firstName', 'Thomas').property('age', 44).property('pk', 'pk')
        // this one uses label to distinguish between vertices, and PK to distinguish between segmentation properties
        g.addV('mary').property('id', 'mary').property('firstName', 'Mary').property('lastName', 'Andersen').property('age', 39).property('pk', 'pk')
        g.addV('person').property('id', 'ben').property('firstName', 'Ben').property('lastName', 'Miller').property('pk', 'pk')
        g.addV('person').property('id', 'robin').property(firstName', 'Robin').property('lastName', 'Wakefield').property('pk', 'pk')
        // Add a vertex representing a user with an embedded array property for favorite movies; total dict can be as big 2MB
        
        // Arrays
        g.addV('user')
          .property('username', 'Alice')
          .property('favorites', ['Movie 1', 'Movie 2', 'Movie 3']) // Will worl on Gremlin Server but not Cosmos
          .next(), // next supposed to be non-mandatory
        // Retrieve the user and their favorite movies
        g.V().has('username', 'Alice')
          .valueMap('username', 'favorites') // again, will work on Gremlin Server but not Cosmos
          .next()

        // Querying
        g.V('person').property('age', 44)
        g.V().hasLabel('person').has('age', gt(40))
        g.V().has('age', between(20, 40))
        g.V().hasLabel('person').order().by('firstName', decr)
        g.V().count()

        // Add connections
        g.V('thomas').addE('knows').to(g.V('mary'))
        g.V('thomas').addE('knows').to(g.V('ben'))
        g.V('ben').addE('knows').to(g.V('robin'))
        

        // Querying connections
        g.V('thomas').outE('knows').inV().hasLabel('person')
        g.V('thomas').outE('knows').inV().hasLabel('person').outE('knows').inV().hasLabel('person')
        g.V().has('name', 'Ben').outE('friend').values('name', 'age') // its a projection - returns only subset of properties of vertex
        g.V().has('name', 'Ben').outE('friend').values('name', 'age').fold()", // Fold is a terminal step that returns a list
        g.V().outE('knows').has('since', gte(2010)).inV() // "in values" is a projection-sybquery

        // Recursive queries and traversals
        g.V('thomas').repeat(out()).until(has('id', 'robin')).path() // Find the path from Thomas to Robin
        g.V().hasLabel('person').order().by('firstName', decr)
        g.V('thomas').outE('knows').where(inV().has('id', 'mary'))
        g.V().has('firstName', 'Ben')  // Start at the vertex representing Ben
          .repeat(both().hasLabel('person')) // we are looking for entities of type Friend, not Boor or Laptop etc.
          .times(until(loops().is(eq(0))))  // Traverse friends recursively until depth = 0 (nowhere to go)
          .project('name', 'age')  // Project only name and age properties
            .by('name')
            .by('age')
        
        g.V().hasLabel('person').order().by('firstName', decr).executionProfile()
        g.V('thomas').drop()
      Creating db with a Gremlin interface
        Exercise: create a db
        Exercise: create a graph
        Exercise: manipulate the graph with commands above
      Getting data into Gremlin: no out-of-the-box solution;
        write your own with BulkExecutor
        or dump into JSON then use Data Import tool with JSON
        https://learn.microsoft.com/en-us/azure/cosmos-db/migration-choices
      Exercise: try to parse the Gremlin from Dict into POJO/record

  API Portal:
    ☐ API Management
      Flow: inbound -> backend -> outbound
      Policies: inbound, outbound, backend
    ☐ API Portal
      import swagger
      take swagger from running app
      info section: required; lets add it
    ☐ API Gateway
      ☐ CORS Proxy: dont forget!
    ☐ API Product
    ☐ API Version
    ☐ API Operation




